package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.rule.Spo2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPO2".
*/
public class Spo2Dao extends AbstractDao<Spo2, Void> {

    public static final String TABLENAME = "SPO2";

    /**
     * Properties of entity Spo2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Normal_min = new Property(0, double.class, "normal_min", false, "NORMAL_MIN");
        public final static Property Normal_max = new Property(1, double.class, "normal_max", false, "NORMAL_MAX");
        public final static Property Light_min = new Property(2, double.class, "light_min", false, "LIGHT_MIN");
        public final static Property Light_max = new Property(3, double.class, "light_max", false, "LIGHT_MAX");
        public final static Property Medium_min = new Property(4, double.class, "medium_min", false, "MEDIUM_MIN");
        public final static Property Medium_max = new Property(5, double.class, "medium_max", false, "MEDIUM_MAX");
        public final static Property Serious_min = new Property(6, double.class, "serious_min", false, "SERIOUS_MIN");
        public final static Property Serious_max = new Property(7, double.class, "serious_max", false, "SERIOUS_MAX");
    }


    public Spo2Dao(DaoConfig config) {
        super(config);
    }
    
    public Spo2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPO2\" (" + //
                "\"NORMAL_MIN\" REAL NOT NULL ," + // 0: normal_min
                "\"NORMAL_MAX\" REAL NOT NULL ," + // 1: normal_max
                "\"LIGHT_MIN\" REAL NOT NULL ," + // 2: light_min
                "\"LIGHT_MAX\" REAL NOT NULL ," + // 3: light_max
                "\"MEDIUM_MIN\" REAL NOT NULL ," + // 4: medium_min
                "\"MEDIUM_MAX\" REAL NOT NULL ," + // 5: medium_max
                "\"SERIOUS_MIN\" REAL NOT NULL ," + // 6: serious_min
                "\"SERIOUS_MAX\" REAL NOT NULL );"); // 7: serious_max
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPO2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Spo2 entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getNormal_min());
        stmt.bindDouble(2, entity.getNormal_max());
        stmt.bindDouble(3, entity.getLight_min());
        stmt.bindDouble(4, entity.getLight_max());
        stmt.bindDouble(5, entity.getMedium_min());
        stmt.bindDouble(6, entity.getMedium_max());
        stmt.bindDouble(7, entity.getSerious_min());
        stmt.bindDouble(8, entity.getSerious_max());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Spo2 entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getNormal_min());
        stmt.bindDouble(2, entity.getNormal_max());
        stmt.bindDouble(3, entity.getLight_min());
        stmt.bindDouble(4, entity.getLight_max());
        stmt.bindDouble(5, entity.getMedium_min());
        stmt.bindDouble(6, entity.getMedium_max());
        stmt.bindDouble(7, entity.getSerious_min());
        stmt.bindDouble(8, entity.getSerious_max());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Spo2 readEntity(Cursor cursor, int offset) {
        Spo2 entity = new Spo2( //
            cursor.getDouble(offset + 0), // normal_min
            cursor.getDouble(offset + 1), // normal_max
            cursor.getDouble(offset + 2), // light_min
            cursor.getDouble(offset + 3), // light_max
            cursor.getDouble(offset + 4), // medium_min
            cursor.getDouble(offset + 5), // medium_max
            cursor.getDouble(offset + 6), // serious_min
            cursor.getDouble(offset + 7) // serious_max
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Spo2 entity, int offset) {
        entity.setNormal_min(cursor.getDouble(offset + 0));
        entity.setNormal_max(cursor.getDouble(offset + 1));
        entity.setLight_min(cursor.getDouble(offset + 2));
        entity.setLight_max(cursor.getDouble(offset + 3));
        entity.setMedium_min(cursor.getDouble(offset + 4));
        entity.setMedium_max(cursor.getDouble(offset + 5));
        entity.setSerious_min(cursor.getDouble(offset + 6));
        entity.setSerious_max(cursor.getDouble(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Spo2 entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Spo2 entity) {
        return null;
    }

    @Override
    public boolean hasKey(Spo2 entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
