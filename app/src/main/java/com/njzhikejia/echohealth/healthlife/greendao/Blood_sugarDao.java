package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.rule.Blood_sugar.Vein_whole_bloodConverter;
import com.njzhikejia.echohealth.healthlife.entity.rule.Vein_whole_blood;

import com.njzhikejia.echohealth.healthlife.entity.rule.Blood_sugar;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BLOOD_SUGAR".
*/
public class Blood_sugarDao extends AbstractDao<Blood_sugar, Void> {

    public static final String TABLENAME = "BLOOD_SUGAR";

    /**
     * Properties of entity Blood_sugar.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Vein_whole_blood = new Property(0, String.class, "vein_whole_blood", false, "VEIN_WHOLE_BLOOD");
    }

    private final Vein_whole_bloodConverter vein_whole_bloodConverter = new Vein_whole_bloodConverter();

    public Blood_sugarDao(DaoConfig config) {
        super(config);
    }
    
    public Blood_sugarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BLOOD_SUGAR\" (" + //
                "\"VEIN_WHOLE_BLOOD\" TEXT);"); // 0: vein_whole_blood
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BLOOD_SUGAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Blood_sugar entity) {
        stmt.clearBindings();
 
        Vein_whole_blood vein_whole_blood = entity.getVein_whole_blood();
        if (vein_whole_blood != null) {
            stmt.bindString(1, vein_whole_bloodConverter.convertToDatabaseValue(vein_whole_blood));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Blood_sugar entity) {
        stmt.clearBindings();
 
        Vein_whole_blood vein_whole_blood = entity.getVein_whole_blood();
        if (vein_whole_blood != null) {
            stmt.bindString(1, vein_whole_bloodConverter.convertToDatabaseValue(vein_whole_blood));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Blood_sugar readEntity(Cursor cursor, int offset) {
        Blood_sugar entity = new Blood_sugar( //
            cursor.isNull(offset + 0) ? null : vein_whole_bloodConverter.convertToEntityProperty(cursor.getString(offset + 0)) // vein_whole_blood
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Blood_sugar entity, int offset) {
        entity.setVein_whole_blood(cursor.isNull(offset + 0) ? null : vein_whole_bloodConverter.convertToEntityProperty(cursor.getString(offset + 0)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Blood_sugar entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Blood_sugar entity) {
        return null;
    }

    @Override
    public boolean hasKey(Blood_sugar entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
