package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.Concerns;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONCERNS".
*/
public class ConcernsDao extends AbstractDao<Concerns, Void> {

    public static final String TABLENAME = "CONCERNS";

    /**
     * Properties of entity Concerns.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Concern_id = new Property(0, int.class, "concern_id", false, "CONCERN_ID");
        public final static Property Uid = new Property(1, int.class, "uid", false, "UID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Idcard = new Property(4, String.class, "idcard", false, "IDCARD");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Gender = new Property(6, int.class, "gender", false, "GENDER");
        public final static Property Birthday = new Property(7, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Home_addr = new Property(8, String.class, "home_addr", false, "HOME_ADDR");
        public final static Property Avatar = new Property(9, String.class, "avatar", false, "AVATAR");
        public final static Property Concern_type = new Property(10, int.class, "concern_type", false, "CONCERN_TYPE");
        public final static Property Status = new Property(11, int.class, "status", false, "STATUS");
        public final static Property Create_time = new Property(12, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Result_time = new Property(13, String.class, "result_time", false, "RESULT_TIME");
    }


    public ConcernsDao(DaoConfig config) {
        super(config);
    }
    
    public ConcernsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONCERNS\" (" + //
                "\"CONCERN_ID\" INTEGER NOT NULL ," + // 0: concern_id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"NAME\" TEXT," + // 2: name
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"IDCARD\" TEXT," + // 4: idcard
                "\"PHONE\" TEXT," + // 5: phone
                "\"GENDER\" INTEGER NOT NULL ," + // 6: gender
                "\"BIRTHDAY\" TEXT," + // 7: birthday
                "\"HOME_ADDR\" TEXT," + // 8: home_addr
                "\"AVATAR\" TEXT," + // 9: avatar
                "\"CONCERN_TYPE\" INTEGER NOT NULL ," + // 10: concern_type
                "\"STATUS\" INTEGER NOT NULL ," + // 11: status
                "\"CREATE_TIME\" TEXT," + // 12: create_time
                "\"RESULT_TIME\" TEXT);"); // 13: result_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONCERNS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Concerns entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConcern_id());
        stmt.bindLong(2, entity.getUid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(5, idcard);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getGender());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
 
        String home_addr = entity.getHome_addr();
        if (home_addr != null) {
            stmt.bindString(9, home_addr);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
        stmt.bindLong(11, entity.getConcern_type());
        stmt.bindLong(12, entity.getStatus());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(13, create_time);
        }
 
        String result_time = entity.getResult_time();
        if (result_time != null) {
            stmt.bindString(14, result_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Concerns entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getConcern_id());
        stmt.bindLong(2, entity.getUid());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(5, idcard);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getGender());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(8, birthday);
        }
 
        String home_addr = entity.getHome_addr();
        if (home_addr != null) {
            stmt.bindString(9, home_addr);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
        stmt.bindLong(11, entity.getConcern_type());
        stmt.bindLong(12, entity.getStatus());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(13, create_time);
        }
 
        String result_time = entity.getResult_time();
        if (result_time != null) {
            stmt.bindString(14, result_time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Concerns readEntity(Cursor cursor, int offset) {
        Concerns entity = new Concerns( //
            cursor.getInt(offset + 0), // concern_id
            cursor.getInt(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idcard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.getInt(offset + 6), // gender
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // home_addr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // avatar
            cursor.getInt(offset + 10), // concern_type
            cursor.getInt(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // create_time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // result_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Concerns entity, int offset) {
        entity.setConcern_id(cursor.getInt(offset + 0));
        entity.setUid(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdcard(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGender(cursor.getInt(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHome_addr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setConcern_type(cursor.getInt(offset + 10));
        entity.setStatus(cursor.getInt(offset + 11));
        entity.setCreate_time(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setResult_time(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Concerns entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Concerns entity) {
        return null;
    }

    @Override
    public boolean hasKey(Concerns entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
