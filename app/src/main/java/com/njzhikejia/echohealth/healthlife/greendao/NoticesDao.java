package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.warn.Notices.SrcDataConverter;
import com.njzhikejia.echohealth.healthlife.entity.warn.SrcData;

import com.njzhikejia.echohealth.healthlife.entity.warn.Notices;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTICES".
*/
public class NoticesDao extends AbstractDao<Notices, Void> {

    public static final String TABLENAME = "NOTICES";

    /**
     * Properties of entity Notices.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Status = new Property(2, int.class, "status", false, "STATUS");
        public final static Property Create_time = new Property(3, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Dispatch_time = new Property(4, String.class, "dispatch_time", false, "DISPATCH_TIME");
        public final static Property Dispatch_operator = new Property(5, int.class, "dispatch_operator", false, "DISPATCH_OPERATOR");
        public final static Property Screen_flag = new Property(6, int.class, "screen_flag", false, "SCREEN_FLAG");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Src_data = new Property(8, String.class, "src_data", false, "SRC_DATA");
    }

    private final SrcDataConverter src_dataConverter = new SrcDataConverter();

    public NoticesDao(DaoConfig config) {
        super(config);
    }
    
    public NoticesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTICES\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"STATUS\" INTEGER NOT NULL ," + // 2: status
                "\"CREATE_TIME\" TEXT," + // 3: create_time
                "\"DISPATCH_TIME\" TEXT," + // 4: dispatch_time
                "\"DISPATCH_OPERATOR\" INTEGER NOT NULL ," + // 5: dispatch_operator
                "\"SCREEN_FLAG\" INTEGER NOT NULL ," + // 6: screen_flag
                "\"REMARK\" TEXT," + // 7: remark
                "\"SRC_DATA\" TEXT);"); // 8: src_data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTICES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Notices entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getStatus());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String dispatch_time = entity.getDispatch_time();
        if (dispatch_time != null) {
            stmt.bindString(5, dispatch_time);
        }
        stmt.bindLong(6, entity.getDispatch_operator());
        stmt.bindLong(7, entity.getScreen_flag());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        SrcData src_data = entity.getSrc_data();
        if (src_data != null) {
            stmt.bindString(9, src_dataConverter.convertToDatabaseValue(src_data));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Notices entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getStatus());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(4, create_time);
        }
 
        String dispatch_time = entity.getDispatch_time();
        if (dispatch_time != null) {
            stmt.bindString(5, dispatch_time);
        }
        stmt.bindLong(6, entity.getDispatch_operator());
        stmt.bindLong(7, entity.getScreen_flag());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        SrcData src_data = entity.getSrc_data();
        if (src_data != null) {
            stmt.bindString(9, src_dataConverter.convertToDatabaseValue(src_data));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Notices readEntity(Cursor cursor, int offset) {
        Notices entity = new Notices( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // create_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dispatch_time
            cursor.getInt(offset + 5), // dispatch_operator
            cursor.getInt(offset + 6), // screen_flag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : src_dataConverter.convertToEntityProperty(cursor.getString(offset + 8)) // src_data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Notices entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setCreate_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDispatch_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDispatch_operator(cursor.getInt(offset + 5));
        entity.setScreen_flag(cursor.getInt(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSrc_data(cursor.isNull(offset + 8) ? null : src_dataConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Notices entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Notices entity) {
        return null;
    }

    @Override
    public boolean hasKey(Notices entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
