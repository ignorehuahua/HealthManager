package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.warn.Measure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE".
*/
public class MeasureDao extends AbstractDao<Measure, Void> {

    public static final String TABLENAME = "MEASURE";

    /**
     * Properties of entity Measure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Uid = new Property(1, int.class, "uid", false, "UID");
        public final static Property Device_id = new Property(2, int.class, "device_id", false, "DEVICE_ID");
        public final static Property Src_type = new Property(3, int.class, "src_type", false, "SRC_TYPE");
        public final static Property Src_id = new Property(4, int.class, "src_id", false, "SRC_ID");
        public final static Property Context = new Property(5, int.class, "context", false, "CONTEXT");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property Measure_time = new Property(7, String.class, "measure_time", false, "MEASURE_TIME");
        public final static Property Create_time = new Property(8, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Operator = new Property(9, int.class, "operator", false, "OPERATOR");
        public final static Property Value1 = new Property(10, float.class, "value1", false, "VALUE1");
        public final static Property Value2 = new Property(11, float.class, "value2", false, "VALUE2");
        public final static Property Value3 = new Property(12, float.class, "value3", false, "VALUE3");
        public final static Property Status = new Property(13, int.class, "status", false, "STATUS");
        public final static Property Session_id = new Property(14, int.class, "session_id", false, "SESSION_ID");
        public final static Property Remark = new Property(15, String.class, "remark", false, "REMARK");
    }


    public MeasureDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"UID\" INTEGER NOT NULL ," + // 1: uid
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 2: device_id
                "\"SRC_TYPE\" INTEGER NOT NULL ," + // 3: src_type
                "\"SRC_ID\" INTEGER NOT NULL ," + // 4: src_id
                "\"CONTEXT\" INTEGER NOT NULL ," + // 5: context
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"MEASURE_TIME\" TEXT," + // 7: measure_time
                "\"CREATE_TIME\" TEXT," + // 8: create_time
                "\"OPERATOR\" INTEGER NOT NULL ," + // 9: operator
                "\"VALUE1\" REAL NOT NULL ," + // 10: value1
                "\"VALUE2\" REAL NOT NULL ," + // 11: value2
                "\"VALUE3\" REAL NOT NULL ," + // 12: value3
                "\"STATUS\" INTEGER NOT NULL ," + // 13: status
                "\"SESSION_ID\" INTEGER NOT NULL ," + // 14: session_id
                "\"REMARK\" TEXT);"); // 15: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Measure entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getDevice_id());
        stmt.bindLong(4, entity.getSrc_type());
        stmt.bindLong(5, entity.getSrc_id());
        stmt.bindLong(6, entity.getContext());
        stmt.bindLong(7, entity.getType());
 
        String measure_time = entity.getMeasure_time();
        if (measure_time != null) {
            stmt.bindString(8, measure_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
        stmt.bindLong(10, entity.getOperator());
        stmt.bindDouble(11, entity.getValue1());
        stmt.bindDouble(12, entity.getValue2());
        stmt.bindDouble(13, entity.getValue3());
        stmt.bindLong(14, entity.getStatus());
        stmt.bindLong(15, entity.getSession_id());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Measure entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUid());
        stmt.bindLong(3, entity.getDevice_id());
        stmt.bindLong(4, entity.getSrc_type());
        stmt.bindLong(5, entity.getSrc_id());
        stmt.bindLong(6, entity.getContext());
        stmt.bindLong(7, entity.getType());
 
        String measure_time = entity.getMeasure_time();
        if (measure_time != null) {
            stmt.bindString(8, measure_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
        stmt.bindLong(10, entity.getOperator());
        stmt.bindDouble(11, entity.getValue1());
        stmt.bindDouble(12, entity.getValue2());
        stmt.bindDouble(13, entity.getValue3());
        stmt.bindLong(14, entity.getStatus());
        stmt.bindLong(15, entity.getSession_id());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Measure readEntity(Cursor cursor, int offset) {
        Measure entity = new Measure( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // uid
            cursor.getInt(offset + 2), // device_id
            cursor.getInt(offset + 3), // src_type
            cursor.getInt(offset + 4), // src_id
            cursor.getInt(offset + 5), // context
            cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // measure_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // create_time
            cursor.getInt(offset + 9), // operator
            cursor.getFloat(offset + 10), // value1
            cursor.getFloat(offset + 11), // value2
            cursor.getFloat(offset + 12), // value3
            cursor.getInt(offset + 13), // status
            cursor.getInt(offset + 14), // session_id
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Measure entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setUid(cursor.getInt(offset + 1));
        entity.setDevice_id(cursor.getInt(offset + 2));
        entity.setSrc_type(cursor.getInt(offset + 3));
        entity.setSrc_id(cursor.getInt(offset + 4));
        entity.setContext(cursor.getInt(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setMeasure_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreate_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOperator(cursor.getInt(offset + 9));
        entity.setValue1(cursor.getFloat(offset + 10));
        entity.setValue2(cursor.getFloat(offset + 11));
        entity.setValue3(cursor.getFloat(offset + 12));
        entity.setStatus(cursor.getInt(offset + 13));
        entity.setSession_id(cursor.getInt(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Measure entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Measure entity) {
        return null;
    }

    @Override
    public boolean hasKey(Measure entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
