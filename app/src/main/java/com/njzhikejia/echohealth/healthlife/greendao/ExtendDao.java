package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.user.Extend;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXTEND".
*/
public class ExtendDao extends AbstractDao<Extend, Long> {

    public static final String TABLENAME = "EXTEND";

    /**
     * Properties of entity Extend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "_id");
        public final static Property Gov_flag = new Property(1, int.class, "gov_flag", false, "GOV_FLAG");
        public final static Property Nation = new Property(2, int.class, "nation", false, "NATION");
        public final static Property Community = new Property(3, int.class, "community", false, "COMMUNITY");
        public final static Property Household = new Property(4, int.class, "household", false, "HOUSEHOLD");
        public final static Property Marriage = new Property(5, int.class, "marriage", false, "MARRIAGE");
        public final static Property Political_status = new Property(6, int.class, "political_status", false, "POLITICAL_STATUS");
        public final static Property Edu_level = new Property(7, int.class, "edu_level", false, "EDU_LEVEL");
        public final static Property Health_state = new Property(8, int.class, "health_state", false, "HEALTH_STATE");
        public final static Property Blood_group = new Property(9, int.class, "blood_group", false, "BLOOD_GROUP");
        public final static Property Interests = new Property(10, String.class, "interests", false, "INTERESTS");
        public final static Property Pay_type = new Property(11, int.class, "pay_type", false, "PAY_TYPE");
        public final static Property Sport_habit = new Property(12, int.class, "sport_habit", false, "SPORT_HABIT");
        public final static Property Meal_habit = new Property(13, int.class, "meal_habit", false, "MEAL_HABIT");
        public final static Property Eat_ability = new Property(14, int.class, "eat_ability", false, "EAT_ABILITY");
        public final static Property Wash_ability = new Property(15, int.class, "wash_ability", false, "WASH_ABILITY");
        public final static Property Wear_ability = new Property(16, int.class, "wear_ability", false, "WEAR_ABILITY");
        public final static Property Toilet_ability = new Property(17, int.class, "toilet_ability", false, "TOILET_ABILITY");
        public final static Property Move_ability = new Property(18, int.class, "move_ability", false, "MOVE_ABILITY");
        public final static Property Revenue_level = new Property(19, int.class, "revenue_level", false, "REVENUE_LEVEL");
        public final static Property Chronic_illness = new Property(20, String.class, "chronic_illness", false, "CHRONIC_ILLNESS");
        public final static Property Disability = new Property(21, String.class, "disability", false, "DISABILITY");
        public final static Property Surgery_history = new Property(22, String.class, "surgery_history", false, "SURGERY_HISTORY");
        public final static Property Irritability_history = new Property(23, String.class, "irritability_history", false, "IRRITABILITY_HISTORY");
        public final static Property Family_medical_history = new Property(24, String.class, "family_medical_history", false, "FAMILY_MEDICAL_HISTORY");
        public final static Property Height = new Property(25, String.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(26, String.class, "weight", false, "WEIGHT");
        public final static Property Bust = new Property(27, String.class, "bust", false, "BUST");
        public final static Property Waist = new Property(28, String.class, "waist", false, "WAIST");
        public final static Property Hip = new Property(29, String.class, "hip", false, "HIP");
        public final static Property Remark = new Property(30, String.class, "remark", false, "REMARK");
        public final static Property Readme = new Property(31, String.class, "readme", false, "README");
        public final static Property Constitution_type = new Property(32, int.class, "constitution_type", false, "CONSTITUTION_TYPE");
    }


    public ExtendDao(DaoConfig config) {
        super(config);
    }
    
    public ExtendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXTEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: uid
                "\"GOV_FLAG\" INTEGER NOT NULL ," + // 1: gov_flag
                "\"NATION\" INTEGER NOT NULL ," + // 2: nation
                "\"COMMUNITY\" INTEGER NOT NULL ," + // 3: community
                "\"HOUSEHOLD\" INTEGER NOT NULL ," + // 4: household
                "\"MARRIAGE\" INTEGER NOT NULL ," + // 5: marriage
                "\"POLITICAL_STATUS\" INTEGER NOT NULL ," + // 6: political_status
                "\"EDU_LEVEL\" INTEGER NOT NULL ," + // 7: edu_level
                "\"HEALTH_STATE\" INTEGER NOT NULL ," + // 8: health_state
                "\"BLOOD_GROUP\" INTEGER NOT NULL ," + // 9: blood_group
                "\"INTERESTS\" TEXT," + // 10: interests
                "\"PAY_TYPE\" INTEGER NOT NULL ," + // 11: pay_type
                "\"SPORT_HABIT\" INTEGER NOT NULL ," + // 12: sport_habit
                "\"MEAL_HABIT\" INTEGER NOT NULL ," + // 13: meal_habit
                "\"EAT_ABILITY\" INTEGER NOT NULL ," + // 14: eat_ability
                "\"WASH_ABILITY\" INTEGER NOT NULL ," + // 15: wash_ability
                "\"WEAR_ABILITY\" INTEGER NOT NULL ," + // 16: wear_ability
                "\"TOILET_ABILITY\" INTEGER NOT NULL ," + // 17: toilet_ability
                "\"MOVE_ABILITY\" INTEGER NOT NULL ," + // 18: move_ability
                "\"REVENUE_LEVEL\" INTEGER NOT NULL ," + // 19: revenue_level
                "\"CHRONIC_ILLNESS\" TEXT," + // 20: chronic_illness
                "\"DISABILITY\" TEXT," + // 21: disability
                "\"SURGERY_HISTORY\" TEXT," + // 22: surgery_history
                "\"IRRITABILITY_HISTORY\" TEXT," + // 23: irritability_history
                "\"FAMILY_MEDICAL_HISTORY\" TEXT," + // 24: family_medical_history
                "\"HEIGHT\" TEXT," + // 25: height
                "\"WEIGHT\" TEXT," + // 26: weight
                "\"BUST\" TEXT," + // 27: bust
                "\"WAIST\" TEXT," + // 28: waist
                "\"HIP\" TEXT," + // 29: hip
                "\"REMARK\" TEXT," + // 30: remark
                "\"README\" TEXT," + // 31: readme
                "\"CONSTITUTION_TYPE\" INTEGER NOT NULL );"); // 32: constitution_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXTEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Extend entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
        stmt.bindLong(2, entity.getGov_flag());
        stmt.bindLong(3, entity.getNation());
        stmt.bindLong(4, entity.getCommunity());
        stmt.bindLong(5, entity.getHousehold());
        stmt.bindLong(6, entity.getMarriage());
        stmt.bindLong(7, entity.getPolitical_status());
        stmt.bindLong(8, entity.getEdu_level());
        stmt.bindLong(9, entity.getHealth_state());
        stmt.bindLong(10, entity.getBlood_group());
 
        String interests = entity.getInterests();
        if (interests != null) {
            stmt.bindString(11, interests);
        }
        stmt.bindLong(12, entity.getPay_type());
        stmt.bindLong(13, entity.getSport_habit());
        stmt.bindLong(14, entity.getMeal_habit());
        stmt.bindLong(15, entity.getEat_ability());
        stmt.bindLong(16, entity.getWash_ability());
        stmt.bindLong(17, entity.getWear_ability());
        stmt.bindLong(18, entity.getToilet_ability());
        stmt.bindLong(19, entity.getMove_ability());
        stmt.bindLong(20, entity.getRevenue_level());
 
        String chronic_illness = entity.getChronic_illness();
        if (chronic_illness != null) {
            stmt.bindString(21, chronic_illness);
        }
 
        String disability = entity.getDisability();
        if (disability != null) {
            stmt.bindString(22, disability);
        }
 
        String surgery_history = entity.getSurgery_history();
        if (surgery_history != null) {
            stmt.bindString(23, surgery_history);
        }
 
        String irritability_history = entity.getIrritability_history();
        if (irritability_history != null) {
            stmt.bindString(24, irritability_history);
        }
 
        String family_medical_history = entity.getFamily_medical_history();
        if (family_medical_history != null) {
            stmt.bindString(25, family_medical_history);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(26, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(27, weight);
        }
 
        String bust = entity.getBust();
        if (bust != null) {
            stmt.bindString(28, bust);
        }
 
        String waist = entity.getWaist();
        if (waist != null) {
            stmt.bindString(29, waist);
        }
 
        String hip = entity.getHip();
        if (hip != null) {
            stmt.bindString(30, hip);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(31, remark);
        }
 
        String readme = entity.getReadme();
        if (readme != null) {
            stmt.bindString(32, readme);
        }
        stmt.bindLong(33, entity.getConstitution_type());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Extend entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
        stmt.bindLong(2, entity.getGov_flag());
        stmt.bindLong(3, entity.getNation());
        stmt.bindLong(4, entity.getCommunity());
        stmt.bindLong(5, entity.getHousehold());
        stmt.bindLong(6, entity.getMarriage());
        stmt.bindLong(7, entity.getPolitical_status());
        stmt.bindLong(8, entity.getEdu_level());
        stmt.bindLong(9, entity.getHealth_state());
        stmt.bindLong(10, entity.getBlood_group());
 
        String interests = entity.getInterests();
        if (interests != null) {
            stmt.bindString(11, interests);
        }
        stmt.bindLong(12, entity.getPay_type());
        stmt.bindLong(13, entity.getSport_habit());
        stmt.bindLong(14, entity.getMeal_habit());
        stmt.bindLong(15, entity.getEat_ability());
        stmt.bindLong(16, entity.getWash_ability());
        stmt.bindLong(17, entity.getWear_ability());
        stmt.bindLong(18, entity.getToilet_ability());
        stmt.bindLong(19, entity.getMove_ability());
        stmt.bindLong(20, entity.getRevenue_level());
 
        String chronic_illness = entity.getChronic_illness();
        if (chronic_illness != null) {
            stmt.bindString(21, chronic_illness);
        }
 
        String disability = entity.getDisability();
        if (disability != null) {
            stmt.bindString(22, disability);
        }
 
        String surgery_history = entity.getSurgery_history();
        if (surgery_history != null) {
            stmt.bindString(23, surgery_history);
        }
 
        String irritability_history = entity.getIrritability_history();
        if (irritability_history != null) {
            stmt.bindString(24, irritability_history);
        }
 
        String family_medical_history = entity.getFamily_medical_history();
        if (family_medical_history != null) {
            stmt.bindString(25, family_medical_history);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(26, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(27, weight);
        }
 
        String bust = entity.getBust();
        if (bust != null) {
            stmt.bindString(28, bust);
        }
 
        String waist = entity.getWaist();
        if (waist != null) {
            stmt.bindString(29, waist);
        }
 
        String hip = entity.getHip();
        if (hip != null) {
            stmt.bindString(30, hip);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(31, remark);
        }
 
        String readme = entity.getReadme();
        if (readme != null) {
            stmt.bindString(32, readme);
        }
        stmt.bindLong(33, entity.getConstitution_type());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Extend readEntity(Cursor cursor, int offset) {
        Extend entity = new Extend( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.getInt(offset + 1), // gov_flag
            cursor.getInt(offset + 2), // nation
            cursor.getInt(offset + 3), // community
            cursor.getInt(offset + 4), // household
            cursor.getInt(offset + 5), // marriage
            cursor.getInt(offset + 6), // political_status
            cursor.getInt(offset + 7), // edu_level
            cursor.getInt(offset + 8), // health_state
            cursor.getInt(offset + 9), // blood_group
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // interests
            cursor.getInt(offset + 11), // pay_type
            cursor.getInt(offset + 12), // sport_habit
            cursor.getInt(offset + 13), // meal_habit
            cursor.getInt(offset + 14), // eat_ability
            cursor.getInt(offset + 15), // wash_ability
            cursor.getInt(offset + 16), // wear_ability
            cursor.getInt(offset + 17), // toilet_ability
            cursor.getInt(offset + 18), // move_ability
            cursor.getInt(offset + 19), // revenue_level
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // chronic_illness
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // disability
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // surgery_history
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // irritability_history
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // family_medical_history
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // height
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // weight
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // bust
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // waist
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // hip
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // remark
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // readme
            cursor.getInt(offset + 32) // constitution_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Extend entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGov_flag(cursor.getInt(offset + 1));
        entity.setNation(cursor.getInt(offset + 2));
        entity.setCommunity(cursor.getInt(offset + 3));
        entity.setHousehold(cursor.getInt(offset + 4));
        entity.setMarriage(cursor.getInt(offset + 5));
        entity.setPolitical_status(cursor.getInt(offset + 6));
        entity.setEdu_level(cursor.getInt(offset + 7));
        entity.setHealth_state(cursor.getInt(offset + 8));
        entity.setBlood_group(cursor.getInt(offset + 9));
        entity.setInterests(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPay_type(cursor.getInt(offset + 11));
        entity.setSport_habit(cursor.getInt(offset + 12));
        entity.setMeal_habit(cursor.getInt(offset + 13));
        entity.setEat_ability(cursor.getInt(offset + 14));
        entity.setWash_ability(cursor.getInt(offset + 15));
        entity.setWear_ability(cursor.getInt(offset + 16));
        entity.setToilet_ability(cursor.getInt(offset + 17));
        entity.setMove_ability(cursor.getInt(offset + 18));
        entity.setRevenue_level(cursor.getInt(offset + 19));
        entity.setChronic_illness(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDisability(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setSurgery_history(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIrritability_history(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFamily_medical_history(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setHeight(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setWeight(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setBust(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setWaist(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setHip(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRemark(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setReadme(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setConstitution_type(cursor.getInt(offset + 32));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Extend entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Extend entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Extend entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
