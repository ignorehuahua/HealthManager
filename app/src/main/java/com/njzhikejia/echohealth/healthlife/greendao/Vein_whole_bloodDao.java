package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.rule.Vein_whole_blood;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VEIN_WHOLE_BLOOD".
*/
public class Vein_whole_bloodDao extends AbstractDao<Vein_whole_blood, Void> {

    public static final String TABLENAME = "VEIN_WHOLE_BLOOD";

    /**
     * Properties of entity Vein_whole_blood.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Min = new Property(0, double.class, "min", false, "MIN");
        public final static Property Max = new Property(1, double.class, "max", false, "MAX");
    }


    public Vein_whole_bloodDao(DaoConfig config) {
        super(config);
    }
    
    public Vein_whole_bloodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VEIN_WHOLE_BLOOD\" (" + //
                "\"MIN\" REAL NOT NULL ," + // 0: min
                "\"MAX\" REAL NOT NULL );"); // 1: max
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VEIN_WHOLE_BLOOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Vein_whole_blood entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getMin());
        stmt.bindDouble(2, entity.getMax());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Vein_whole_blood entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getMin());
        stmt.bindDouble(2, entity.getMax());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Vein_whole_blood readEntity(Cursor cursor, int offset) {
        Vein_whole_blood entity = new Vein_whole_blood( //
            cursor.getDouble(offset + 0), // min
            cursor.getDouble(offset + 1) // max
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Vein_whole_blood entity, int offset) {
        entity.setMin(cursor.getDouble(offset + 0));
        entity.setMax(cursor.getDouble(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Vein_whole_blood entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Vein_whole_blood entity) {
        return null;
    }

    @Override
    public boolean hasKey(Vein_whole_blood entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
