package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.rule.Bp.DiastolicConverter;
import com.njzhikejia.echohealth.healthlife.entity.rule.Bp.SystolicConverter;
import com.njzhikejia.echohealth.healthlife.entity.rule.Diastolic;
import com.njzhikejia.echohealth.healthlife.entity.rule.Systolic;

import com.njzhikejia.echohealth.healthlife.entity.rule.Bp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BP".
*/
public class BpDao extends AbstractDao<Bp, Void> {

    public static final String TABLENAME = "BP";

    /**
     * Properties of entity Bp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Systolic = new Property(0, String.class, "systolic", false, "SYSTOLIC");
        public final static Property Diastolic = new Property(1, String.class, "diastolic", false, "DIASTOLIC");
    }

    private final SystolicConverter systolicConverter = new SystolicConverter();
    private final DiastolicConverter diastolicConverter = new DiastolicConverter();

    public BpDao(DaoConfig config) {
        super(config);
    }
    
    public BpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BP\" (" + //
                "\"SYSTOLIC\" TEXT," + // 0: systolic
                "\"DIASTOLIC\" TEXT);"); // 1: diastolic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bp entity) {
        stmt.clearBindings();
 
        Systolic systolic = entity.getSystolic();
        if (systolic != null) {
            stmt.bindString(1, systolicConverter.convertToDatabaseValue(systolic));
        }
 
        Diastolic diastolic = entity.getDiastolic();
        if (diastolic != null) {
            stmt.bindString(2, diastolicConverter.convertToDatabaseValue(diastolic));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bp entity) {
        stmt.clearBindings();
 
        Systolic systolic = entity.getSystolic();
        if (systolic != null) {
            stmt.bindString(1, systolicConverter.convertToDatabaseValue(systolic));
        }
 
        Diastolic diastolic = entity.getDiastolic();
        if (diastolic != null) {
            stmt.bindString(2, diastolicConverter.convertToDatabaseValue(diastolic));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Bp readEntity(Cursor cursor, int offset) {
        Bp entity = new Bp( //
            cursor.isNull(offset + 0) ? null : systolicConverter.convertToEntityProperty(cursor.getString(offset + 0)), // systolic
            cursor.isNull(offset + 1) ? null : diastolicConverter.convertToEntityProperty(cursor.getString(offset + 1)) // diastolic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bp entity, int offset) {
        entity.setSystolic(cursor.isNull(offset + 0) ? null : systolicConverter.convertToEntityProperty(cursor.getString(offset + 0)));
        entity.setDiastolic(cursor.isNull(offset + 1) ? null : diastolicConverter.convertToEntityProperty(cursor.getString(offset + 1)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Bp entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Bp entity) {
        return null;
    }

    @Override
    public boolean hasKey(Bp entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
