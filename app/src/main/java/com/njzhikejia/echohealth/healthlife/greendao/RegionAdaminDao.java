package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.warn.RegionAdamin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGION_ADAMIN".
*/
public class RegionAdaminDao extends AbstractDao<RegionAdamin, Void> {

    public static final String TABLENAME = "REGION_ADAMIN";

    /**
     * Properties of entity RegionAdamin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Role = new Property(1, int.class, "role", false, "ROLE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(3, int.class, "gender", false, "GENDER");
        public final static Property Phone1 = new Property(4, String.class, "phone1", false, "PHONE1");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
    }


    public RegionAdaminDao(DaoConfig config) {
        super(config);
    }
    
    public RegionAdaminDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGION_ADAMIN\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"ROLE\" INTEGER NOT NULL ," + // 1: role
                "\"NAME\" TEXT," + // 2: name
                "\"GENDER\" INTEGER NOT NULL ," + // 3: gender
                "\"PHONE1\" TEXT," + // 4: phone1
                "\"STATUS\" INTEGER NOT NULL );"); // 5: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGION_ADAMIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegionAdamin entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRole());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getGender());
 
        String phone1 = entity.getPhone1();
        if (phone1 != null) {
            stmt.bindString(5, phone1);
        }
        stmt.bindLong(6, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegionAdamin entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getRole());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getGender());
 
        String phone1 = entity.getPhone1();
        if (phone1 != null) {
            stmt.bindString(5, phone1);
        }
        stmt.bindLong(6, entity.getStatus());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RegionAdamin readEntity(Cursor cursor, int offset) {
        RegionAdamin entity = new RegionAdamin( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // role
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone1
            cursor.getInt(offset + 5) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegionAdamin entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setRole(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.getInt(offset + 3));
        entity.setPhone1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RegionAdamin entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RegionAdamin entity) {
        return null;
    }

    @Override
    public boolean hasKey(RegionAdamin entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
