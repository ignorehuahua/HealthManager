package com.njzhikejia.echohealth.healthlife.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.njzhikejia.echohealth.healthlife.entity.Reports;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPORTS".
*/
public class ReportsDao extends AbstractDao<Reports, Void> {

    public static final String TABLENAME = "REPORTS";

    /**
     * Properties of entity Reports.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property User_id = new Property(1, int.class, "user_id", false, "USER_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Src_id = new Property(3, int.class, "src_id", false, "SRC_ID");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
        public final static Property Create_time = new Property(5, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Result_id = new Property(6, int.class, "result_id", false, "RESULT_ID");
        public final static Property Result = new Property(7, String.class, "result", false, "RESULT");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
    }


    public ReportsDao(DaoConfig config) {
        super(config);
    }
    
    public ReportsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPORTS\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: user_id
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"SRC_ID\" INTEGER NOT NULL ," + // 3: src_id
                "\"STATUS\" INTEGER NOT NULL ," + // 4: status
                "\"CREATE_TIME\" TEXT," + // 5: create_time
                "\"RESULT_ID\" INTEGER NOT NULL ," + // 6: result_id
                "\"RESULT\" TEXT," + // 7: result
                "\"REMARK\" TEXT);"); // 8: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPORTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Reports entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getSrc_id());
        stmt.bindLong(5, entity.getStatus());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
        stmt.bindLong(7, entity.getResult_id());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Reports entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getUser_id());
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getSrc_id());
        stmt.bindLong(5, entity.getStatus());
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
        stmt.bindLong(7, entity.getResult_id());
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(8, result);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Reports readEntity(Cursor cursor, int offset) {
        Reports entity = new Reports( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // user_id
            cursor.getInt(offset + 2), // type
            cursor.getInt(offset + 3), // src_id
            cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // create_time
            cursor.getInt(offset + 6), // result_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // result
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Reports entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setUser_id(cursor.getInt(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setSrc_id(cursor.getInt(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
        entity.setCreate_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setResult_id(cursor.getInt(offset + 6));
        entity.setResult(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Reports entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Reports entity) {
        return null;
    }

    @Override
    public boolean hasKey(Reports entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
